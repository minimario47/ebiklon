/**
 * UI-modul f√∂r v√§gs√∂kning mellan signaler/stoppbock/SSY
 * Hanterar klick-sekvens, visualisering och popups
 */

class PathfindingUI {
  constructor(map, graphBuilder, pathEngine) {
    this.map = map;
    this.graphBuilder = graphBuilder;
    this.pathEngine = pathEngine;
    
    // Klick-sekvens f√∂r v√§gs√∂kning
    this.selectedObjects = [];
    
    // Aktiva v√§gar och visualisering
    this.foundPaths = [];
    this.pathLayers = [];
    this.selectedPathIndex = null;
    
    // Popup-referenser
    this.currentPopup = null;
    this.pathPopup = null;
  }

  /**
   * L√§gg till objekt i klick-sekvensen
   * @param {Object} obj - Objekt med {type, id, coord, ...}
   */
  addToSequence(obj) {
    // Validera att objektet √§r till√•tet (signal, stoppbock, SSY)
    if (!this.isValidPathObject(obj)) {
      console.warn('Objektet kan inte anv√§ndas f√∂r v√§gs√∂kning:', obj.type);
      return;
    }

    this.selectedObjects.push(obj);
    console.log(`Objekt ${this.selectedObjects.length}: ${obj.type} ${obj.id}`);

    // Uppdatera popup med "V√§g"-knapp om 2+ objekt
    if (this.selectedObjects.length >= 2) {
      this.showPathButton();
    }
  }

  /**
   * Kontrollera om objekttyp √§r giltig f√∂r v√§gs√∂kning
   */
  isValidPathObject(obj) {
    const validTypes = ['signal', 'stoppbock', 'ssy'];
    return validTypes.includes(obj.type?.toLowerCase());
  }

  /**
   * Visa "V√§g"-knapp i aktuell popup
   */
  showPathButton() {
    if (!this.currentPopup) return;

    const popupContent = this.currentPopup.getElement();
    if (!popupContent) return;

    // Kolla om knappen redan finns
    if (popupContent.querySelector('.path-search-btn')) return;

    // Skapa "V√§g"-knapp
    const button = document.createElement('button');
    button.className = 'path-search-btn';
    button.textContent = 'üõ§Ô∏è V√§g';
    button.style.cssText = `
      margin-top: 10px;
      padding: 8px 16px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
      width: 100%;
    `;

    button.addEventListener('click', () => this.executePathSearch());

    // L√§gg till knappen i popup
    const contentDiv = popupContent.querySelector('.popup-content') || popupContent;
    contentDiv.appendChild(button);
  }

  /**
   * Utf√∂r v√§gs√∂kning mellan valda objekt
   */
  async executePathSearch() {
    if (this.selectedObjects.length < 2) {
      alert('V√§lj minst 2 objekt f√∂r v√§gs√∂kning');
      return;
    }

    const start = this.selectedObjects[0];
    const end = this.selectedObjects[this.selectedObjects.length - 1];
    const via = this.selectedObjects.length === 3 ? this.selectedObjects[1] : null;

    console.log(`S√∂ker v√§g: ${start.type} ${start.id} ‚Üí ${end.type} ${end.id}${via ? ` via ${via.type} ${via.id}` : ''}`);

    try {
      // Hitta v√§gar (via st√∂ds inte √§n)
      if (via) {
        alert('Via-punkter st√∂ds inte √§n. V√§lj bara start och slut.');
        return;
      }
      
      this.foundPaths = this.pathEngine.findPaths(start.id, end.id);

      if (this.foundPaths.length === 0) {
        alert('Inga v√§gar hittades mellan de valda objekten');
        return;
      }

      console.log(`Hittade ${this.foundPaths.length} v√§gar`);

      // Visa resultat i alert (SVG-visualisering kommer senare)
      this.showPathResults();

    } catch (error) {
      console.error('Fel vid v√§gs√∂kning:', error);
      alert('Ett fel uppstod vid v√§gs√∂kning: ' + error.message);
    }
  }

  /**
   * Visa resultat i alert (enkel version)
   */
  showPathResults() {
    let message = `Hittade ${this.foundPaths.length} v√§g(ar)!\n\n`;
    
    this.foundPaths.forEach((path, index) => {
      const signals = path.crossedObjects.filter(o => o.type === 'signal');
      const pois = path.crossedObjects.filter(o => o.type === 'poi');
      const dcrs = path.crossedObjects.filter(o => o.type === 'dcr');
      
      message += `V√§g ${index + 1}:\n`;
      message += `  L√§ngd: ${Math.round(path.totalLength)}m\n`;
      message += `  Signaler: ${signals.map(s => s.id).join(' ‚Üí ')}\n`;
      if (pois.length > 0) message += `  V√§xlar: ${pois.map(p => p.id).join(', ')}\n`;
      if (dcrs.length > 0) message += `  DCR: ${dcrs.map(d => d.id).join(', ')}\n`;
      message += '\n';
    });
    
    alert(message);
    
    // √Öterst√§ll sekvens efter visning
    this.resetPathSearch();
  }

  // SVG-visualisering kommer senare

  /**
   * √Öterst√§ll v√§gs√∂kning och rensa visualisering
   */
  resetPathSearch() {
    console.log('√Öterst√§ller v√§gs√∂kning');
    
    // Rensa sekvens
    this.selectedObjects = [];
    
    // Rensa v√§gar
    this.foundPaths = [];
    this.selectedPathIndex = null;
    
    // Ta bort visualisering
    this.clearPathLayers();
    
    // St√§ng popups
    this.closeCurrentPopup();
    if (this.pathPopup) {
      this.map.closePopup(this.pathPopup);
      this.pathPopup = null;
    }
  }

  /**
   * Rensa visualisering (placeholder)
   */
  clearPathLayers() {
    this.pathLayers = [];
  }

  // Popup-hantering tas bort (anv√§nds inte med SVG)
}

// Exportera f√∂r anv√§ndning i index.html
window.PathfindingUI = PathfindingUI;

